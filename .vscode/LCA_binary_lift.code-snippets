{
	// Place your CP workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ snippet": {
	"prefix": "hack_LCA_WITHDIST",
	"body": [
	"",
	"struct LCA{",
	"    vector<vector<int>> up;",
	"    vector<int> tin, tout, distance;",
	"    int timer;",
	"    LCA(int n) {",
	"        timer = 0;",
	"        tin.resize(n);",
	"        tout.resize(n);",
	"        up.assign(n, vector<int>(21, -1));",
	"        distance.assign(n, 0);",
	"    }",
	"    void dfs(int v, int p, vector<vector<int>> &adj, int dis) {",
	"        distance[v]=dis;",
	"        tin[v] = ++timer;",
	"        up[v][0] = p;",
	"        for (int i = 1; i < 21; i++)",
	"            up[v][i] = up[up[v][i - 1]][i - 1];",
	"        for (int u : adj[v]) {",
	"            if (u != p)",
	"                dfs(u, v, adj, dis+1);",
	"        }",
	"        tout[v] = ++timer;",
	"    }",
	"    bool is_ancestor(int u, int v) {",
	"        return tin[u] <= tin[v] && tout[u] >= tout[v];",
	"    }",
	"    int lca(int u, int v) {",
	"        if (is_ancestor(u, v))",
	"            return u;",
	"        if (is_ancestor(v, u))",
	"            return v;",
	"        for (int i = 20; i >= 0; i--) {",
	"            if (!is_ancestor(up[u][i], v))",
	"                u = up[u][i];",
	"        }",
	"        return up[u][0];",
	"    }",
	"    int dist(int u, int v) {",
	"        int w = lca(u, v);",
	"        return abs(distance[u] + distance[v] - 2*distance[w]);",
	"    }",
	"};"
	],
	"description": "This is a snippet for LCA with distance function "
	}
}