{
"C++ snippet": {
  "prefix": "hack_centroid",
  "body": [
    "",
    "class centroid_decomp{",
    "     public:",
    "     int n;",
    "     vector<vector<int>>adj;",
    "     vector<int> subtree,level;",
    "     centroid_decomp(int n,vector<vector<int>>adj){",
    "          this->n=n; this->adj=adj;",
    "          subtree.assign(n+1,0);",
    "          level.assign(n+1,0);",
    "     }",
    "     int getSize(int node, int par=-1){",
    "          subtree[node]=1;",
    "          for(auto child:adj[node]){",
    "               if(child==par or level[child]) continue;",
    "               subtree[node]+=getSize(child,node);",
    "          }",
    "          return subtree[node];",
    "     }",
    "     int centroid(int node, int r, int par =-1){ // r is the size of current tree",
    "          for(auto child:adj[node]){",
    "               if(child==par or level[child]) continue;",
    "               if(subtree[child]*2>r) return centroid(child,r,node);",
    "          }",
    "          return node;",
    "     }",
    "     int decompose(int node, int l){",
    "          int cent=centroid(node,getSize(node));",
    "          level[cent]=l;",
    "          for(auto child:adj[cent]){",
    "               if(!level[child]) decompose(child,l+1);",
    "          }",
    "          return cent;",
    "     }",
    "",
    "};",
    "",
    ""
  ],
  "description": ""
},
}