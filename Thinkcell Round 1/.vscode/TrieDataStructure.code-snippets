{
  "Trie with support of persistent trie  ->mridul1809 -> https://codeforces.com/blog/entry/68858": {
  "prefix": "hack_TrieTemplate",
  "body": [
    "",
    "class Trie{",
    "",
    "public:",
    "    const static int N = 26;",
    "    const static char baseChar = 'a';",
    "    struct TrieNode",
    "    {",
    "        int next[N];",
    "        bool isEnd;",
    "        int freq;",
    "        TrieNode()",
    "        {",
    "            for (int i = 0; i < N; i++)",
    "                next[i] = -1;",
    "            isEnd = false;",
    "            freq = 0;",
    "        }",
    "    };",
    "",
    "    vector<TrieNode> tree;",
    "    Trie()",
    "    {",
    "        tree.push_back(TrieNode());",
    "    }",
    "",
    "    void insert(const string &s)",
    "    {",
    "        int p = 0;",
    "        tree[p].freq++;",
    "        for (int i = 0; i < s.size(); i++)",
    "        {",
    "            if (tree[p].next[s[i] - baseChar] == -1)",
    "            {",
    "                tree.push_back(TrieNode());",
    "                tree[p].next[s[i] - baseChar] = tree.size() - 1;",
    "            }",
    "",
    "            p = tree[p].next[s[i] - baseChar];",
    "            tree[p].freq++;",
    "        }",
    "        tree[p].isEnd = true;",
    "    }",
    "",
    "    bool checkPrefix(const string &s)",
    "    {",
    "        int p = 0;",
    "        for (int i = 0; i < s.size(); i++)",
    "        {",
    "            if (tree[p].next[s[i] - baseChar] == -1)",
    "                return false;",
    "",
    "            p = tree[p].next[s[i] - baseChar];",
    "        }",
    "        return true;",
    "    }",
    "",
    "    bool checkString(const string &s)",
    "    {",
    "        int p = 0;",
    "        for (int i = 0; i < s.size(); i++)",
    "        {",
    "            if (tree[p].next[s[i] - baseChar] == -1)",
    "                return false;",
    "",
    "            p = tree[p].next[s[i] - baseChar];",
    "        }",
    "",
    "        return tree[p].isEnd;",
    "    }",
    "",
    "    int persistentInsert(int head, const string &s)",
    "    {",
    "        int old = head;",
    "",
    "        tree.push_back(TrieNode());",
    "        int now = tree.size() - 1;",
    "        int newHead = now;",
    "",
    "        int i, j;",
    "",
    "        for (i = 0; i < s.size(); i++)",
    "        {",
    "            if (old == -1)",
    "            {",
    "                tree.push_back(TrieNode());",
    "                tree[now].next[s[i] - baseChar] = tree.size() - 1;",
    "                tree[now].freq++;",
    "                now = tree[now].next[s[i] - baseChar];",
    "                continue;",
    "            }",
    "            for (j = 0; j < N; j++)",
    "                tree[now].next[j] = tree[old].next[j];",
    "            tree[now].freq = tree[old].freq;",
    "            tree[now].isEnd = tree[old].isEnd;",
    "",
    "            tree[now].freq++;",
    "",
    "            tree.push_back(TrieNode());",
    "            tree[now].next[s[i] - baseChar] = tree.size() - 1;",
    "",
    "            old = tree[old].next[s[i] - baseChar];",
    "            now = tree[now].next[s[i] - baseChar];",
    "        }",
    "",
    "        tree[now].freq++;",
    "        tree[now].isEnd = true;",
    "",
    "        return newHead;",
    "    }",
    "",
    "    bool persistentCheckPrefix(int head, const string &s)",
    "    {",
    "        int p = head;",
    "        for (int i = 0; i < s.size(); i++)",
    "        {",
    "            if (tree[p].next[s[i] - baseChar] == -1)",
    "                return false;",
    "",
    "            p = tree[p].next[s[i] - baseChar];",
    "        }",
    "        return true;",
    "    }",
    "",
    "    bool persistentCheckString(int head, const string &s)",
    "    {",
    "        int p = head;",
    "        for (int i = 0; i < s.size(); i++)",
    "        {",
    "            if (tree[p].next[s[i] - baseChar] == -1)",
    "                return false;",
    "",
    "            p = tree[p].next[s[i] - baseChar];",
    "        }",
    "        return tree[p].isEnd;",
    "    }",
    "};",
    "",
    ""
  ],
  "description": "Trie with support of persistent trie  ->mridul1809 -> https://codeforces.com/blog/entry/68858"
}
}